#include "Dependencies.h"

#include "MouCaGraphicEngine/include/VulkanEnum.h"

#include <LibRT/include/RTEnum.h>

namespace MouCaGraphic
{

//-----------------------------------------------------------------------------------------
//                                  Helper and string
//-----------------------------------------------------------------------------------------
std::map<Core::String, VkAttachmentLoadOp> attachmentLoads
{
    { "VK_ATTACHMENT_LOAD_OP_LOAD",      VK_ATTACHMENT_LOAD_OP_LOAD },
    { "VK_ATTACHMENT_LOAD_OP_CLEAR",     VK_ATTACHMENT_LOAD_OP_CLEAR },
    { "VK_ATTACHMENT_LOAD_OP_DONT_CARE", VK_ATTACHMENT_LOAD_OP_DONT_CARE }
};

std::map<Core::String, VkAttachmentStoreOp> attachmentStores
{
    { "VK_ATTACHMENT_STORE_OP_STORE",     VK_ATTACHMENT_STORE_OP_STORE },
    { "VK_ATTACHMENT_STORE_OP_DONT_CARE", VK_ATTACHMENT_STORE_OP_DONT_CARE },
    { "VK_ATTACHMENT_STORE_OP_NONE_QCOM", VK_ATTACHMENT_STORE_OP_NONE_QCOM },
};

std::map<Core::String, VkPipelineBindPoint> bindPoints
{
    { "VK_PIPELINE_BIND_POINT_GRAPHICS",        VK_PIPELINE_BIND_POINT_GRAPHICS },
    { "VK_PIPELINE_BIND_POINT_COMPUTE",         VK_PIPELINE_BIND_POINT_COMPUTE },
    { "VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR", VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR },
    { "VK_PIPELINE_BIND_POINT_RAY_TRACING_NV",  VK_PIPELINE_BIND_POINT_RAY_TRACING_NV }
};

std::map<Core::String, VkImageLayout> imageLayouts
{
    { "VK_IMAGE_LAYOUT_UNDEFINED",                        VK_IMAGE_LAYOUT_UNDEFINED },
    { "VK_IMAGE_LAYOUT_GENERAL",                          VK_IMAGE_LAYOUT_GENERAL },
    { "VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL",         VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL },
    { "VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL", VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL },
    { "VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL",  VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL },
    { "VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL",         VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL },
    { "VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL",             VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL  },
    { "VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL",             VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL },
    { "VK_IMAGE_LAYOUT_PREINITIALIZED",                   VK_IMAGE_LAYOUT_PREINITIALIZED  },
    { "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL",       VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL },
    { "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL",       VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL },
    { "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL",          VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL },
    { "VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL",       VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL },
    { "VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL",        VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL },
    { "VK_IMAGE_LAYOUT_PRESENT_SRC_KHR",                  VK_IMAGE_LAYOUT_PRESENT_SRC_KHR },
    { "VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR",               VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR },
    { "VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV",          VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV },
    { "VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT", VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT },
    { "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR",   VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR },
    { "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR",   VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR },
    { "VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR",     VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR },
    { "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR",     VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR },
    { "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR",      VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR },
    { "VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR",   VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR },
    { "VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR",    VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR },
};

std::map<Core::String, VkPresentModeKHR> presentModes
{
    { "VK_PRESENT_MODE_IMMEDIATE_KHR",                 VK_PRESENT_MODE_IMMEDIATE_KHR },
    { "VK_PRESENT_MODE_MAILBOX_KHR",                   VK_PRESENT_MODE_MAILBOX_KHR },
    { "VK_PRESENT_MODE_FIFO_KHR",                      VK_PRESENT_MODE_FIFO_KHR },
    { "VK_PRESENT_MODE_FIFO_RELAXED_KHR",              VK_PRESENT_MODE_FIFO_RELAXED_KHR },
    { "VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR",     VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR },
    { "VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR", VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR }
};

std::map<Core::String, VkFormat> formats
{
    { "VK_FORMAT_UNDEFINED", VK_FORMAT_UNDEFINED },
    { "VK_FORMAT_R4G4_UNORM_PACK8", VK_FORMAT_R4G4_UNORM_PACK8 },
    { "VK_FORMAT_R4G4B4A4_UNORM_PACK16", VK_FORMAT_R4G4B4A4_UNORM_PACK16 },
    { "VK_FORMAT_B4G4R4A4_UNORM_PACK16", VK_FORMAT_B4G4R4A4_UNORM_PACK16 },
    { "VK_FORMAT_R5G6B5_UNORM_PACK16", VK_FORMAT_R5G6B5_UNORM_PACK16 },
    { "VK_FORMAT_B5G6R5_UNORM_PACK16", VK_FORMAT_B5G6R5_UNORM_PACK16 },
    { "VK_FORMAT_R5G5B5A1_UNORM_PACK16", VK_FORMAT_R5G5B5A1_UNORM_PACK16 },
    { "VK_FORMAT_B5G5R5A1_UNORM_PACK16", VK_FORMAT_B5G5R5A1_UNORM_PACK16 },
    { "VK_FORMAT_A1R5G5B5_UNORM_PACK16", VK_FORMAT_A1R5G5B5_UNORM_PACK16 },
    { "VK_FORMAT_R8_UNORM", VK_FORMAT_R8_UNORM },
    { "VK_FORMAT_R8_SNORM", VK_FORMAT_R8_SNORM },
    { "VK_FORMAT_R8_USCALED", VK_FORMAT_R8_USCALED },
    { "VK_FORMAT_R8_SSCALED", VK_FORMAT_R8_SSCALED },
    { "VK_FORMAT_R8_UINT", VK_FORMAT_R8_UINT },
    { "VK_FORMAT_R8_SINT", VK_FORMAT_R8_SINT },
    { "VK_FORMAT_R8_SRGB", VK_FORMAT_R8_SRGB },
    { "VK_FORMAT_R8G8_UNORM", VK_FORMAT_R8G8_UNORM },
    { "VK_FORMAT_R8G8_SNORM", VK_FORMAT_R8G8_SNORM },
    { "VK_FORMAT_R8G8_USCALED", VK_FORMAT_R8G8_USCALED },
    { "VK_FORMAT_R8G8_SSCALED", VK_FORMAT_R8G8_SSCALED },
    { "VK_FORMAT_R8G8_UINT", VK_FORMAT_R8G8_UINT },
    { "VK_FORMAT_R8G8_SINT", VK_FORMAT_R8G8_SINT },
    { "VK_FORMAT_R8G8_SRGB", VK_FORMAT_R8G8_SRGB },
    { "VK_FORMAT_R8G8B8_UNORM", VK_FORMAT_R8G8B8_UNORM },
    { "VK_FORMAT_R8G8B8_SNORM", VK_FORMAT_R8G8B8_SNORM },
    { "VK_FORMAT_R8G8B8_USCALED", VK_FORMAT_R8G8B8_USCALED },
    { "VK_FORMAT_R8G8B8_SSCALED", VK_FORMAT_R8G8B8_SSCALED },
    { "VK_FORMAT_R8G8B8_UINT", VK_FORMAT_R8G8B8_UINT },
    { "VK_FORMAT_R8G8B8_SINT", VK_FORMAT_R8G8B8_SINT },
    { "VK_FORMAT_R8G8B8_SRGB", VK_FORMAT_R8G8B8_SRGB },
    { "VK_FORMAT_B8G8R8_UNORM", VK_FORMAT_B8G8R8_UNORM },
    { "VK_FORMAT_B8G8R8_SNORM", VK_FORMAT_B8G8R8_SNORM },
    { "VK_FORMAT_B8G8R8_USCALED", VK_FORMAT_B8G8R8_USCALED },
    { "VK_FORMAT_B8G8R8_SSCALED", VK_FORMAT_B8G8R8_SSCALED },
    { "VK_FORMAT_B8G8R8_UINT", VK_FORMAT_B8G8R8_UINT },
    { "VK_FORMAT_B8G8R8_SINT", VK_FORMAT_B8G8R8_SINT },
    { "VK_FORMAT_B8G8R8_SRGB", VK_FORMAT_B8G8R8_SRGB },
    { "VK_FORMAT_R8G8B8A8_UNORM", VK_FORMAT_R8G8B8A8_UNORM },
    { "VK_FORMAT_R8G8B8A8_SNORM", VK_FORMAT_R8G8B8A8_SNORM },
    { "VK_FORMAT_R8G8B8A8_USCALED", VK_FORMAT_R8G8B8A8_USCALED },
    { "VK_FORMAT_R8G8B8A8_SSCALED", VK_FORMAT_R8G8B8A8_SSCALED },
    { "VK_FORMAT_R8G8B8A8_UINT", VK_FORMAT_R8G8B8A8_UINT },
    { "VK_FORMAT_R8G8B8A8_SINT", VK_FORMAT_R8G8B8A8_SINT },
    { "VK_FORMAT_R8G8B8A8_SRGB", VK_FORMAT_R8G8B8A8_SRGB },
    { "VK_FORMAT_B8G8R8A8_UNORM", VK_FORMAT_B8G8R8A8_UNORM },
    { "VK_FORMAT_B8G8R8A8_SNORM", VK_FORMAT_B8G8R8A8_SNORM },
    { "VK_FORMAT_B8G8R8A8_USCALED", VK_FORMAT_B8G8R8A8_USCALED },
    { "VK_FORMAT_B8G8R8A8_SSCALED", VK_FORMAT_B8G8R8A8_SSCALED },
    { "VK_FORMAT_B8G8R8A8_UINT", VK_FORMAT_B8G8R8A8_UINT },
    { "VK_FORMAT_B8G8R8A8_SINT", VK_FORMAT_B8G8R8A8_SINT },
    { "VK_FORMAT_B8G8R8A8_SRGB", VK_FORMAT_B8G8R8A8_SRGB },
    { "VK_FORMAT_A8B8G8R8_UNORM_PACK32", VK_FORMAT_A8B8G8R8_UNORM_PACK32 },
    { "VK_FORMAT_A8B8G8R8_SNORM_PACK32", VK_FORMAT_A8B8G8R8_SNORM_PACK32 },
    { "VK_FORMAT_A8B8G8R8_USCALED_PACK32", VK_FORMAT_A8B8G8R8_USCALED_PACK32 },
    { "VK_FORMAT_A8B8G8R8_SSCALED_PACK32", VK_FORMAT_A8B8G8R8_SSCALED_PACK32 },
    { "VK_FORMAT_A8B8G8R8_UINT_PACK32", VK_FORMAT_A8B8G8R8_UINT_PACK32 },
    { "VK_FORMAT_A8B8G8R8_SINT_PACK32", VK_FORMAT_A8B8G8R8_SINT_PACK32 },
    { "VK_FORMAT_A8B8G8R8_SRGB_PACK32", VK_FORMAT_A8B8G8R8_SRGB_PACK32 },
    { "VK_FORMAT_A2R10G10B10_UNORM_PACK32", VK_FORMAT_A2R10G10B10_UNORM_PACK32 },
    { "VK_FORMAT_A2R10G10B10_SNORM_PACK32", VK_FORMAT_A2R10G10B10_SNORM_PACK32 },
    { "VK_FORMAT_A2R10G10B10_USCALED_PACK32", VK_FORMAT_A2R10G10B10_USCALED_PACK32 },
    { "VK_FORMAT_A2R10G10B10_SSCALED_PACK32", VK_FORMAT_A2R10G10B10_SSCALED_PACK32 },
    { "VK_FORMAT_A2R10G10B10_UINT_PACK32", VK_FORMAT_A2R10G10B10_UINT_PACK32 },
    { "VK_FORMAT_A2R10G10B10_SINT_PACK32", VK_FORMAT_A2R10G10B10_SINT_PACK32 },
    { "VK_FORMAT_A2B10G10R10_UNORM_PACK32", VK_FORMAT_A2B10G10R10_UNORM_PACK32 },
    { "VK_FORMAT_A2B10G10R10_SNORM_PACK32", VK_FORMAT_A2B10G10R10_SNORM_PACK32 },
    { "VK_FORMAT_A2B10G10R10_USCALED_PACK32", VK_FORMAT_A2B10G10R10_USCALED_PACK32 },
    { "VK_FORMAT_A2B10G10R10_SSCALED_PACK32", VK_FORMAT_A2B10G10R10_SSCALED_PACK32 },
    { "VK_FORMAT_A2B10G10R10_UINT_PACK32", VK_FORMAT_A2B10G10R10_UINT_PACK32 },
    { "VK_FORMAT_A2B10G10R10_SINT_PACK32", VK_FORMAT_A2B10G10R10_SINT_PACK32 },
    { "VK_FORMAT_R16_UNORM", VK_FORMAT_R16_UNORM },
    { "VK_FORMAT_R16_SNORM", VK_FORMAT_R16_SNORM },
    { "VK_FORMAT_R16_USCALED", VK_FORMAT_R16_USCALED },
    { "VK_FORMAT_R16_SSCALED", VK_FORMAT_R16_SSCALED },
    { "VK_FORMAT_R16_UINT", VK_FORMAT_R16_UINT },
    { "VK_FORMAT_R16_SINT", VK_FORMAT_R16_SINT },
    { "VK_FORMAT_R16_SFLOAT", VK_FORMAT_R16_SFLOAT },
    { "VK_FORMAT_R16G16_UNORM", VK_FORMAT_R16G16_UNORM },
    { "VK_FORMAT_R16G16_SNORM", VK_FORMAT_R16G16_SNORM },
    { "VK_FORMAT_R16G16_USCALED", VK_FORMAT_R16G16_USCALED },
    { "VK_FORMAT_R16G16_SSCALED", VK_FORMAT_R16G16_SSCALED },
    { "VK_FORMAT_R16G16_UINT", VK_FORMAT_R16G16_UINT },
    { "VK_FORMAT_R16G16_SINT", VK_FORMAT_R16G16_SINT },
    { "VK_FORMAT_R16G16_SFLOAT", VK_FORMAT_R16G16_SFLOAT },
    { "VK_FORMAT_R16G16B16_UNORM", VK_FORMAT_R16G16B16_UNORM },
    { "VK_FORMAT_R16G16B16_SNORM", VK_FORMAT_R16G16B16_SNORM },
    { "VK_FORMAT_R16G16B16_USCALED", VK_FORMAT_R16G16B16_USCALED },
    { "VK_FORMAT_R16G16B16_SSCALED", VK_FORMAT_R16G16B16_SSCALED },
    { "VK_FORMAT_R16G16B16_UINT", VK_FORMAT_R16G16B16_UINT },
    { "VK_FORMAT_R16G16B16_SINT", VK_FORMAT_R16G16B16_SINT },
    { "VK_FORMAT_R16G16B16_SFLOAT", VK_FORMAT_R16G16B16_SFLOAT },
    { "VK_FORMAT_R16G16B16A16_UNORM", VK_FORMAT_R16G16B16A16_UNORM },
    { "VK_FORMAT_R16G16B16A16_SNORM", VK_FORMAT_R16G16B16A16_SNORM },
    { "VK_FORMAT_R16G16B16A16_USCALED", VK_FORMAT_R16G16B16A16_USCALED },
    { "VK_FORMAT_R16G16B16A16_SSCALED", VK_FORMAT_R16G16B16A16_SSCALED },
    { "VK_FORMAT_R16G16B16A16_UINT", VK_FORMAT_R16G16B16A16_UINT },
    { "VK_FORMAT_R16G16B16A16_SINT", VK_FORMAT_R16G16B16A16_SINT },
    { "VK_FORMAT_R16G16B16A16_SFLOAT", VK_FORMAT_R16G16B16A16_SFLOAT },
    { "VK_FORMAT_R32_UINT", VK_FORMAT_R32_UINT },
    { "VK_FORMAT_R32_SINT", VK_FORMAT_R32_SINT },
    { "VK_FORMAT_R32_SFLOAT", VK_FORMAT_R32_SFLOAT },
    { "VK_FORMAT_R32G32_UINT", VK_FORMAT_R32G32_UINT },
    { "VK_FORMAT_R32G32_SINT", VK_FORMAT_R32G32_SINT },
    { "VK_FORMAT_R32G32_SFLOAT", VK_FORMAT_R32G32_SFLOAT },
    { "VK_FORMAT_R32G32B32_UINT", VK_FORMAT_R32G32B32_UINT },
    { "VK_FORMAT_R32G32B32_SINT", VK_FORMAT_R32G32B32_SINT },
    { "VK_FORMAT_R32G32B32_SFLOAT", VK_FORMAT_R32G32B32_SFLOAT },
    { "VK_FORMAT_R32G32B32A32_UINT", VK_FORMAT_R32G32B32A32_UINT },
    { "VK_FORMAT_R32G32B32A32_SINT", VK_FORMAT_R32G32B32A32_SINT },
    { "VK_FORMAT_R32G32B32A32_SFLOAT", VK_FORMAT_R32G32B32A32_SFLOAT },
    { "VK_FORMAT_R64_UINT", VK_FORMAT_R64_UINT },
    { "VK_FORMAT_R64_SINT", VK_FORMAT_R64_SINT },
    { "VK_FORMAT_R64_SFLOAT", VK_FORMAT_R64_SFLOAT },
    { "VK_FORMAT_R64G64_UINT", VK_FORMAT_R64G64_UINT },
    { "VK_FORMAT_R64G64_SINT", VK_FORMAT_R64G64_SINT },
    { "VK_FORMAT_R64G64_SFLOAT", VK_FORMAT_R64G64_SFLOAT },
    { "VK_FORMAT_R64G64B64_UINT", VK_FORMAT_R64G64B64_UINT },
    { "VK_FORMAT_R64G64B64_SINT", VK_FORMAT_R64G64B64_SINT },
    { "VK_FORMAT_R64G64B64_SFLOAT", VK_FORMAT_R64G64B64_SFLOAT },
    { "VK_FORMAT_R64G64B64A64_UINT", VK_FORMAT_R64G64B64A64_UINT },
    { "VK_FORMAT_R64G64B64A64_SINT", VK_FORMAT_R64G64B64A64_SINT },
    { "VK_FORMAT_R64G64B64A64_SFLOAT", VK_FORMAT_R64G64B64A64_SFLOAT },
    { "VK_FORMAT_B10G11R11_UFLOAT_PACK32", VK_FORMAT_B10G11R11_UFLOAT_PACK32 },
    { "VK_FORMAT_E5B9G9R9_UFLOAT_PACK32", VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 },
    { "VK_FORMAT_D16_UNORM", VK_FORMAT_D16_UNORM },
    { "VK_FORMAT_X8_D24_UNORM_PACK32", VK_FORMAT_X8_D24_UNORM_PACK32 },
    { "VK_FORMAT_D32_SFLOAT", VK_FORMAT_D32_SFLOAT },
    { "VK_FORMAT_S8_UINT", VK_FORMAT_S8_UINT },
    { "VK_FORMAT_D16_UNORM_S8_UINT", VK_FORMAT_D16_UNORM_S8_UINT },
    { "VK_FORMAT_D24_UNORM_S8_UINT", VK_FORMAT_D24_UNORM_S8_UINT },
    { "VK_FORMAT_D32_SFLOAT_S8_UINT", VK_FORMAT_D32_SFLOAT_S8_UINT },
    { "VK_FORMAT_BC1_RGB_UNORM_BLOCK", VK_FORMAT_BC1_RGB_UNORM_BLOCK },
    { "VK_FORMAT_BC1_RGB_SRGB_BLOCK", VK_FORMAT_BC1_RGB_SRGB_BLOCK },
    { "VK_FORMAT_BC1_RGBA_UNORM_BLOCK", VK_FORMAT_BC1_RGBA_UNORM_BLOCK },
    { "VK_FORMAT_BC1_RGBA_SRGB_BLOCK", VK_FORMAT_BC1_RGBA_SRGB_BLOCK },
    { "VK_FORMAT_BC2_UNORM_BLOCK", VK_FORMAT_BC2_UNORM_BLOCK },
    { "VK_FORMAT_BC2_SRGB_BLOCK", VK_FORMAT_BC2_SRGB_BLOCK },
    { "VK_FORMAT_BC3_UNORM_BLOCK", VK_FORMAT_BC3_UNORM_BLOCK },
    { "VK_FORMAT_BC3_SRGB_BLOCK", VK_FORMAT_BC3_SRGB_BLOCK },
    { "VK_FORMAT_BC4_UNORM_BLOCK", VK_FORMAT_BC4_UNORM_BLOCK },
    { "VK_FORMAT_BC4_SNORM_BLOCK", VK_FORMAT_BC4_SNORM_BLOCK },
    { "VK_FORMAT_BC5_UNORM_BLOCK", VK_FORMAT_BC5_UNORM_BLOCK },
    { "VK_FORMAT_BC5_SNORM_BLOCK", VK_FORMAT_BC5_SNORM_BLOCK },
    { "VK_FORMAT_BC6H_UFLOAT_BLOCK", VK_FORMAT_BC6H_UFLOAT_BLOCK },
    { "VK_FORMAT_BC6H_SFLOAT_BLOCK", VK_FORMAT_BC6H_SFLOAT_BLOCK },
    { "VK_FORMAT_BC7_UNORM_BLOCK", VK_FORMAT_BC7_UNORM_BLOCK },
    { "VK_FORMAT_BC7_SRGB_BLOCK", VK_FORMAT_BC7_SRGB_BLOCK },
    { "VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK", VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK },
    { "VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK", VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK },
    { "VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK", VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK },
    { "VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK", VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK },
    { "VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK", VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK },
    { "VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK", VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK },
    { "VK_FORMAT_EAC_R11_UNORM_BLOCK", VK_FORMAT_EAC_R11_UNORM_BLOCK },
    { "VK_FORMAT_EAC_R11_SNORM_BLOCK", VK_FORMAT_EAC_R11_SNORM_BLOCK },
    { "VK_FORMAT_EAC_R11G11_UNORM_BLOCK", VK_FORMAT_EAC_R11G11_UNORM_BLOCK },
    { "VK_FORMAT_EAC_R11G11_SNORM_BLOCK", VK_FORMAT_EAC_R11G11_SNORM_BLOCK },
    { "VK_FORMAT_ASTC_4x4_UNORM_BLOCK", VK_FORMAT_ASTC_4x4_UNORM_BLOCK },
    { "VK_FORMAT_ASTC_4x4_SRGB_BLOCK", VK_FORMAT_ASTC_4x4_SRGB_BLOCK },
    { "VK_FORMAT_ASTC_5x4_UNORM_BLOCK", VK_FORMAT_ASTC_5x4_UNORM_BLOCK },
    { "VK_FORMAT_ASTC_5x4_SRGB_BLOCK", VK_FORMAT_ASTC_5x4_SRGB_BLOCK },
    { "VK_FORMAT_ASTC_5x5_UNORM_BLOCK", VK_FORMAT_ASTC_5x5_UNORM_BLOCK },
    { "VK_FORMAT_ASTC_5x5_SRGB_BLOCK", VK_FORMAT_ASTC_5x5_SRGB_BLOCK },
    { "VK_FORMAT_ASTC_6x5_UNORM_BLOCK", VK_FORMAT_ASTC_6x5_UNORM_BLOCK },
    { "VK_FORMAT_ASTC_6x5_SRGB_BLOCK", VK_FORMAT_ASTC_6x5_SRGB_BLOCK },
    { "VK_FORMAT_ASTC_6x6_UNORM_BLOCK", VK_FORMAT_ASTC_6x6_UNORM_BLOCK },
    { "VK_FORMAT_ASTC_6x6_SRGB_BLOCK", VK_FORMAT_ASTC_6x6_SRGB_BLOCK },
    { "VK_FORMAT_ASTC_8x5_UNORM_BLOCK", VK_FORMAT_ASTC_8x5_UNORM_BLOCK },
    { "VK_FORMAT_ASTC_8x5_SRGB_BLOCK", VK_FORMAT_ASTC_8x5_SRGB_BLOCK },
    { "VK_FORMAT_ASTC_8x6_UNORM_BLOCK", VK_FORMAT_ASTC_8x6_UNORM_BLOCK },
    { "VK_FORMAT_ASTC_8x6_SRGB_BLOCK", VK_FORMAT_ASTC_8x6_SRGB_BLOCK },
    { "VK_FORMAT_ASTC_8x8_UNORM_BLOCK", VK_FORMAT_ASTC_8x8_UNORM_BLOCK },
    { "VK_FORMAT_ASTC_8x8_SRGB_BLOCK", VK_FORMAT_ASTC_8x8_SRGB_BLOCK },
    { "VK_FORMAT_ASTC_10x5_UNORM_BLOCK", VK_FORMAT_ASTC_10x5_UNORM_BLOCK },
    { "VK_FORMAT_ASTC_10x5_SRGB_BLOCK", VK_FORMAT_ASTC_10x5_SRGB_BLOCK },
    { "VK_FORMAT_ASTC_10x6_UNORM_BLOCK", VK_FORMAT_ASTC_10x6_UNORM_BLOCK },
    { "VK_FORMAT_ASTC_10x6_SRGB_BLOCK", VK_FORMAT_ASTC_10x6_SRGB_BLOCK },
    { "VK_FORMAT_ASTC_10x8_UNORM_BLOCK", VK_FORMAT_ASTC_10x8_UNORM_BLOCK },
    { "VK_FORMAT_ASTC_10x8_SRGB_BLOCK", VK_FORMAT_ASTC_10x8_SRGB_BLOCK },
    { "VK_FORMAT_ASTC_10x10_UNORM_BLOCK", VK_FORMAT_ASTC_10x10_UNORM_BLOCK },
    { "VK_FORMAT_ASTC_10x10_SRGB_BLOCK", VK_FORMAT_ASTC_10x10_SRGB_BLOCK },
    { "VK_FORMAT_ASTC_12x10_UNORM_BLOCK", VK_FORMAT_ASTC_12x10_UNORM_BLOCK },
    { "VK_FORMAT_ASTC_12x10_SRGB_BLOCK", VK_FORMAT_ASTC_12x10_SRGB_BLOCK },
    { "VK_FORMAT_ASTC_12x12_UNORM_BLOCK", VK_FORMAT_ASTC_12x12_UNORM_BLOCK },
    { "VK_FORMAT_ASTC_12x12_SRGB_BLOCK", VK_FORMAT_ASTC_12x12_SRGB_BLOCK },
    { "VK_FORMAT_G8B8G8R8_422_UNORM", VK_FORMAT_G8B8G8R8_422_UNORM },
    { "VK_FORMAT_B8G8R8G8_422_UNORM", VK_FORMAT_B8G8R8G8_422_UNORM },
    { "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM", VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM },
    { "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM", VK_FORMAT_G8_B8R8_2PLANE_420_UNORM },
    { "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM",                  VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM },
    { "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM",                   VK_FORMAT_G8_B8R8_2PLANE_422_UNORM },
    { "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM",                  VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM },
    { "VK_FORMAT_R10X6_UNORM_PACK16",                         VK_FORMAT_R10X6_UNORM_PACK16 },
    { "VK_FORMAT_R10X6G10X6_UNORM_2PACK16",                   VK_FORMAT_R10X6G10X6_UNORM_2PACK16 },
    { "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16",         VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 },
    { "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16",     VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 },
    { "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16",     VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 },
    { "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16", VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 },
    { "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16",  VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 },
    { "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16", VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 },
    { "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16",  VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 },
    { "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16", VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 },
    { "VK_FORMAT_R12X4_UNORM_PACK16",                         VK_FORMAT_R12X4_UNORM_PACK16 },
    { "VK_FORMAT_R12X4G12X4_UNORM_2PACK16",                   VK_FORMAT_R12X4G12X4_UNORM_2PACK16 },
    { "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16",         VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 },
    { "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16",     VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 },
    { "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16",     VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 },
    { "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16", VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 },
    { "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16",  VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 },
    { "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16", VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 },
    { "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16",  VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 },
    { "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16", VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 },
    { "VK_FORMAT_G16B16G16R16_422_UNORM",                     VK_FORMAT_G16B16G16R16_422_UNORM },
    { "VK_FORMAT_B16G16R16G16_422_UNORM",                     VK_FORMAT_B16G16R16G16_422_UNORM },
    { "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM",               VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM },
    { "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM",                VK_FORMAT_G16_B16R16_2PLANE_420_UNORM },
    { "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM",               VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM },
    { "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM",                VK_FORMAT_G16_B16R16_2PLANE_422_UNORM },
    { "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM",               VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM },
    { "VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG",                VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG },
    { "VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG",                VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG },
    { "VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG",                VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG },
    { "VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG",                VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG },
    { "VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG",                 VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG },
    { "VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG",                 VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG },
    { "VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG",                 VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG },
    { "VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG",                 VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG }
};

std::map<Core::String, VkSurfaceTransformFlagBitsKHR> surfaceTransforms
{
    { "VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR",   VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR },
    { "VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR",  VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR },
    { "VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR", VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR },
    { "VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR", VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR },
    { "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR",            VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR },
    { "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR",  VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR },
    { "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR", VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR },
    { "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR", VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR },
    { "VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR",    VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR }
};

std::map<Core::String, VkBufferCreateFlags> bufferCreates
{
    { "VK_BUFFER_CREATE_SPARSE_BINDING_BIT",                    VK_BUFFER_CREATE_SPARSE_BINDING_BIT},
    { "VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT",                  VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT},
    { "VK_BUFFER_CREATE_SPARSE_ALIASED_BIT",                    VK_BUFFER_CREATE_SPARSE_ALIASED_BIT},
    { "VK_BUFFER_CREATE_PROTECTED_BIT",                         VK_BUFFER_CREATE_PROTECTED_BIT},
    { "VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT",     VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT},
    { "VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT", VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT},
    { "VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR", VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR},
};

std::map<Core::String, VkBufferUsageFlags> bufferUsages
{
    { "VK_BUFFER_USAGE_TRANSFER_SRC_BIT",		                VK_BUFFER_USAGE_TRANSFER_SRC_BIT },
    { "VK_BUFFER_USAGE_TRANSFER_DST_BIT",		                VK_BUFFER_USAGE_TRANSFER_DST_BIT },
    { "VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT",     		VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT },
    { "VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT",     		VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT },
    { "VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT",		            VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT },
    { "VK_BUFFER_USAGE_STORAGE_BUFFER_BIT",		            VK_BUFFER_USAGE_STORAGE_BUFFER_BIT },
    { "VK_BUFFER_USAGE_INDEX_BUFFER_BIT",		                VK_BUFFER_USAGE_INDEX_BUFFER_BIT },
    { "VK_BUFFER_USAGE_VERTEX_BUFFER_BIT",		            VK_BUFFER_USAGE_VERTEX_BUFFER_BIT },
    { "VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT",		            VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT },
    { "VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT",		    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT },
    { "VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT",	VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT },
    { "VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT",            VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT },
    { "VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT",                        VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT },
    { "VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR", VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR },
    { "VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR",               VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR },
    { "VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR",         VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR },
    { "VK_BUFFER_USAGE_RAY_TRACING_BIT_NV",		            VK_BUFFER_USAGE_RAY_TRACING_BIT_NV },
    { "VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT",		VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT },
    { "VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR",		VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR }
};

std::map<Core::String, VkImageUsageFlags> imageUsages
{
    { "VK_IMAGE_USAGE_TRANSFER_SRC_BIT",              VK_IMAGE_USAGE_TRANSFER_SRC_BIT },
    { "VK_IMAGE_USAGE_TRANSFER_DST_BIT",              VK_IMAGE_USAGE_TRANSFER_DST_BIT },
    { "VK_IMAGE_USAGE_SAMPLED_BIT",                   VK_IMAGE_USAGE_SAMPLED_BIT },
    { "VK_IMAGE_USAGE_STORAGE_BIT",                   VK_IMAGE_USAGE_STORAGE_BIT },
    { "VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT",          VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT },
    { "VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT",  VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT },
    { "VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT",      VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT },
    { "VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT",          VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT },
    { "VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV",     VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV },
    { "VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT",  VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT },
    { "VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR", VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR }
};

std::map<Core::String, VkColorSpaceKHR> colorSpaces
{
    { "VK_COLOR_SPACE_SRGB_NONLINEAR_KHR", VK_COLOR_SPACE_SRGB_NONLINEAR_KHR},
    { "VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT", VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT },
    { "VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT", VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT },
    { "VK_COLOR_SPACE_DCI_P3_LINEAR_EXT", VK_COLOR_SPACE_DCI_P3_LINEAR_EXT },
    { "VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT", VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT },
    { "VK_COLOR_SPACE_BT709_LINEAR_EXT", VK_COLOR_SPACE_BT709_LINEAR_EXT },
    { "VK_COLOR_SPACE_BT709_NONLINEAR_EXT", VK_COLOR_SPACE_BT709_NONLINEAR_EXT },
    { "VK_COLOR_SPACE_BT2020_LINEAR_EXT", VK_COLOR_SPACE_BT2020_LINEAR_EXT },
    { "VK_COLOR_SPACE_HDR10_ST2084_EXT", VK_COLOR_SPACE_HDR10_ST2084_EXT },
    { "VK_COLOR_SPACE_DOLBYVISION_EXT", VK_COLOR_SPACE_DOLBYVISION_EXT },
    { "VK_COLOR_SPACE_HDR10_HLG_EXT", VK_COLOR_SPACE_HDR10_HLG_EXT },
    { "VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT", VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT },
    { "VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT", VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT },
    { "VK_COLOR_SPACE_PASS_THROUGH_EXT", VK_COLOR_SPACE_PASS_THROUGH_EXT },
    { "VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT", VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT }
};

std::map<Core::String, VkImageType> imageTypes
{
    { "VK_IMAGE_TYPE_1D", VK_IMAGE_TYPE_1D },
    { "VK_IMAGE_TYPE_2D", VK_IMAGE_TYPE_2D },
    { "VK_IMAGE_TYPE_3D", VK_IMAGE_TYPE_3D }
};

std::map<Core::String, VkSampleCountFlagBits> samples
{
    { "VK_SAMPLE_COUNT_1_BIT", VK_SAMPLE_COUNT_1_BIT },
    { "VK_SAMPLE_COUNT_2_BIT", VK_SAMPLE_COUNT_2_BIT },
    { "VK_SAMPLE_COUNT_4_BIT", VK_SAMPLE_COUNT_4_BIT },
    { "VK_SAMPLE_COUNT_8_BIT", VK_SAMPLE_COUNT_8_BIT },
    { "VK_SAMPLE_COUNT_16_BIT", VK_SAMPLE_COUNT_16_BIT },
    { "VK_SAMPLE_COUNT_32_BIT", VK_SAMPLE_COUNT_32_BIT },
    { "VK_SAMPLE_COUNT_64_BIT", VK_SAMPLE_COUNT_64_BIT }
};

std::map<Core::String, VkImageTiling> tilings
{
    { "VK_IMAGE_TILING_OPTIMAL",                 VK_IMAGE_TILING_OPTIMAL },
    { "VK_IMAGE_TILING_LINEAR",                  VK_IMAGE_TILING_LINEAR },
    { "VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT", VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT }
};

std::map<Core::String, VkSharingMode> sharingModes
{
    { "VK_SHARING_MODE_EXCLUSIVE",  VK_SHARING_MODE_EXCLUSIVE  },
    { "VK_SHARING_MODE_CONCURRENT", VK_SHARING_MODE_CONCURRENT }
};

std::map<Core::String, VkComponentSwizzle> componentSwizzles
{
    { "VK_COMPONENT_SWIZZLE_IDENTITY", VK_COMPONENT_SWIZZLE_IDENTITY },
    { "VK_COMPONENT_SWIZZLE_ZERO",    VK_COMPONENT_SWIZZLE_ZERO },
    { "VK_COMPONENT_SWIZZLE_ONE",     VK_COMPONENT_SWIZZLE_ONE },
    { "VK_COMPONENT_SWIZZLE_R",       VK_COMPONENT_SWIZZLE_R },
    { "VK_COMPONENT_SWIZZLE_G",       VK_COMPONENT_SWIZZLE_G },
    { "VK_COMPONENT_SWIZZLE_B",       VK_COMPONENT_SWIZZLE_B },
    { "VK_COMPONENT_SWIZZLE_A",       VK_COMPONENT_SWIZZLE_A }
};

std::map<Core::String, VkImageViewType> viewTypes
{
    { "VK_IMAGE_VIEW_TYPE_1D",         VK_IMAGE_VIEW_TYPE_1D },
    { "VK_IMAGE_VIEW_TYPE_2D",         VK_IMAGE_VIEW_TYPE_2D },
    { "VK_IMAGE_VIEW_TYPE_3D",         VK_IMAGE_VIEW_TYPE_3D },
    { "VK_IMAGE_VIEW_TYPE_CUBE",       VK_IMAGE_VIEW_TYPE_CUBE },
    { "VK_IMAGE_VIEW_TYPE_1D_ARRAY",   VK_IMAGE_VIEW_TYPE_1D_ARRAY },
    { "VK_IMAGE_VIEW_TYPE_2D_ARRAY",   VK_IMAGE_VIEW_TYPE_2D_ARRAY },
    { "VK_IMAGE_VIEW_TYPE_CUBE_ARRAY", VK_IMAGE_VIEW_TYPE_CUBE_ARRAY }
};

std::map<Core::String, VkMemoryAllocateFlags> memoryAllocates
{
    { "VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT",                       VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT },
    { "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT",                    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT },
    { "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT",     VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT },
    { "VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR",                   VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR },
    { "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR",                VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR },
    { "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR", VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR },
};


std::map<Core::String, VkMemoryPropertyFlags> memoryProperties
{
    { "VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT",        VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT },
    { "VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT",        VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT },
    { "VK_MEMORY_PROPERTY_HOST_COHERENT_BIT",       VK_MEMORY_PROPERTY_HOST_COHERENT_BIT },
    { "VK_MEMORY_PROPERTY_HOST_CACHED_BIT",         VK_MEMORY_PROPERTY_HOST_CACHED_BIT   },
    { "VK_MEMORY_PROPERTY_HOST_CACHED_BIT",         VK_MEMORY_PROPERTY_HOST_CACHED_BIT },
    { "VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT",    VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT },
    { "VK_MEMORY_PROPERTY_PROTECTED_BIT",           VK_MEMORY_PROPERTY_PROTECTED_BIT },
    { "VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD", VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD },
    { "VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD", VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD },
};

std::map<Core::String, VkCommandBufferLevel> commandBufferLevels
{
    { "VK_COMMAND_BUFFER_LEVEL_PRIMARY",   VK_COMMAND_BUFFER_LEVEL_PRIMARY },
    { "VK_COMMAND_BUFFER_LEVEL_SECONDARY", VK_COMMAND_BUFFER_LEVEL_SECONDARY }
};

std::map<Core::String, VkPipelineStageFlags> pipelineStageFlags
{
    { "VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT",                        VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT },
    { "VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT",                      VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT },
    { "VK_PIPELINE_STAGE_VERTEX_INPUT_BIT",                       VK_PIPELINE_STAGE_VERTEX_INPUT_BIT },
    { "VK_PIPELINE_STAGE_VERTEX_SHADER_BIT",                      VK_PIPELINE_STAGE_VERTEX_SHADER_BIT },
    { "VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT",        VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT },
    { "VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT",     VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT },
    { "VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT",                    VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT },
    { "VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT",                    VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT },
    { "VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT",               VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT },
    { "VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT",                VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT },
    { "VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT",            VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT },
    { "VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT",                     VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT },
    { "VK_PIPELINE_STAGE_TRANSFER_BIT",                           VK_PIPELINE_STAGE_TRANSFER_BIT },
    { "VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT",                     VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT },
    { "VK_PIPELINE_STAGE_HOST_BIT",                               VK_PIPELINE_STAGE_HOST_BIT },
    { "VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT",                       VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT },
    { "VK_PIPELINE_STAGE_ALL_COMMANDS_BIT",                       VK_PIPELINE_STAGE_ALL_COMMANDS_BIT },
    { "VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT",             VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT },
    { "VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT",          VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT },
    { "VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR",             VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR },
    { "VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR",   VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR },
    { "VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV",              VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV },
    { "VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV",                     VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV },
    { "VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV",                     VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV },
    { "VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT",       VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT },
    { "VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV",              VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV },
    { "VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV",              VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV },
    { "VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV",    VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV }
};

std::map<Core::String, VkSubpassContents> subpassContents
{
    { "VK_SUBPASS_CONTENTS_INLINE",                    VK_SUBPASS_CONTENTS_INLINE },
    { "VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS", VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS }
};

std::map<Core::String, uint32_t> subPassHelper
{
    { "VK_SUBPASS_EXTERNAL", VK_SUBPASS_EXTERNAL }
};

std::map<Core::String, VkAccessFlags> accessFlags
{
    { "VK_ACCESS_INDIRECT_COMMAND_READ_BIT",                  VK_ACCESS_INDIRECT_COMMAND_READ_BIT},
    { "VK_ACCESS_INDEX_READ_BIT",                             VK_ACCESS_INDEX_READ_BIT},
    { "VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT",                  VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT},
    { "VK_ACCESS_UNIFORM_READ_BIT",                           VK_ACCESS_UNIFORM_READ_BIT},
    { "VK_ACCESS_INPUT_ATTACHMENT_READ_BIT",                  VK_ACCESS_INPUT_ATTACHMENT_READ_BIT},
    { "VK_ACCESS_SHADER_READ_BIT",                            VK_ACCESS_SHADER_READ_BIT},
    { "VK_ACCESS_SHADER_WRITE_BIT",                           VK_ACCESS_SHADER_WRITE_BIT},
    { "VK_ACCESS_COLOR_ATTACHMENT_READ_BIT",                  VK_ACCESS_COLOR_ATTACHMENT_READ_BIT},
    { "VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT",                 VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT},
    { "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT",          VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT},
    { "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT",         VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT},
    { "VK_ACCESS_TRANSFER_READ_BIT",                          VK_ACCESS_TRANSFER_READ_BIT},
    { "VK_ACCESS_TRANSFER_WRITE_BIT",                         VK_ACCESS_TRANSFER_WRITE_BIT},
    { "VK_ACCESS_HOST_READ_BIT",                              VK_ACCESS_HOST_READ_BIT},
    { "VK_ACCESS_HOST_WRITE_BIT",                             VK_ACCESS_HOST_WRITE_BIT},
    { "VK_ACCESS_MEMORY_READ_BIT",                            VK_ACCESS_MEMORY_READ_BIT},
    { "VK_ACCESS_MEMORY_WRITE_BIT",                           VK_ACCESS_MEMORY_WRITE_BIT},
    { "VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT",           VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT},
    { "VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT",    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT},
    { "VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT",   VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT},
    { "VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT",         VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT},
    { "VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT",  VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT},
    { "VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR",        VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR},
    { "VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR",       VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR},
    { "VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV",             VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV},
    { "VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT",          VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT},
    { "VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV",             VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV},
    { "VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV",            VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV},
    { "VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV",         VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV},
    { "VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV",        VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV },
    { "VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR", VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR },
};

std::map<Core::String, VkDependencyFlags> dependencyFlags
{
    { "VK_DEPENDENCY_BY_REGION_BIT",          VK_DEPENDENCY_BY_REGION_BIT},
    { "VK_DEPENDENCY_DEVICE_GROUP_BIT",       VK_DEPENDENCY_DEVICE_GROUP_BIT},
    { "VK_DEPENDENCY_VIEW_LOCAL_BIT",         VK_DEPENDENCY_VIEW_LOCAL_BIT},
    { "VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR",     VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR},
    { "VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR",   VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR}
};

std::map<Core::String, VkImageAspectFlags> aspectFlags
{
    { "VK_IMAGE_ASPECT_COLOR_BIT",                VK_IMAGE_ASPECT_COLOR_BIT},
    { "VK_IMAGE_ASPECT_DEPTH_BIT",                VK_IMAGE_ASPECT_DEPTH_BIT},
    { "VK_IMAGE_ASPECT_STENCIL_BIT",              VK_IMAGE_ASPECT_STENCIL_BIT},
    { "VK_IMAGE_ASPECT_METADATA_BIT",             VK_IMAGE_ASPECT_METADATA_BIT},
    { "VK_IMAGE_ASPECT_PLANE_0_BIT",              VK_IMAGE_ASPECT_PLANE_0_BIT},
    { "VK_IMAGE_ASPECT_PLANE_1_BIT",              VK_IMAGE_ASPECT_PLANE_1_BIT},
    { "VK_IMAGE_ASPECT_PLANE_2_BIT",              VK_IMAGE_ASPECT_PLANE_2_BIT},
    { "VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT",   VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT},
    { "VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT",   VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT},
    { "VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT",   VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT},
    { "VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT",   VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT},
    { "VK_IMAGE_ASPECT_PLANE_0_BIT_KHR",          VK_IMAGE_ASPECT_PLANE_0_BIT_KHR },
    { "VK_IMAGE_ASPECT_PLANE_1_BIT_KHR",          VK_IMAGE_ASPECT_PLANE_1_BIT_KHR},
    { "VK_IMAGE_ASPECT_PLANE_2_BIT_KHR",          VK_IMAGE_ASPECT_PLANE_2_BIT_KHR}
};

std::map<Core::String, uint32_t> subPassAttachmentHelper
{
    { "VK_ATTACHMENT_UNUSED", VK_ATTACHMENT_UNUSED }
};

std::map<Core::String, VkFenceCreateFlags> fenceCreates
{
    { "VK_FENCE_CREATE_SIGNALED_BIT", VK_FENCE_CREATE_SIGNALED_BIT }
};

std::map<Core::String, VkPrimitiveTopology> primitiveTopologies
{
    { "VK_PRIMITIVE_TOPOLOGY_POINT_LIST",                     VK_PRIMITIVE_TOPOLOGY_POINT_LIST },
    { "VK_PRIMITIVE_TOPOLOGY_LINE_LIST",                      VK_PRIMITIVE_TOPOLOGY_LINE_LIST },
    { "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP",                     VK_PRIMITIVE_TOPOLOGY_LINE_STRIP },
    { "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST",                  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST },
    { "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP",                 VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP },
    { "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN",                   VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN },
    { "VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY",       VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY },
    { "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY",      VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY },
    { "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY",   VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY },
    { "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY",  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY },
    { "VK_PRIMITIVE_TOPOLOGY_PATCH_LIST",                     VK_PRIMITIVE_TOPOLOGY_PATCH_LIST }
};

std::map<Core::String, VkCullModeFlags> cullModes
{
    { "VK_CULL_MODE_NONE",            VK_CULL_MODE_NONE },
    { "VK_CULL_MODE_FRONT_BIT",       VK_CULL_MODE_FRONT_BIT },
    { "VK_CULL_MODE_BACK_BIT",        VK_CULL_MODE_BACK_BIT },
    { "VK_CULL_MODE_FRONT_AND_BACK",  VK_CULL_MODE_FRONT_AND_BACK }
};

std::map<Core::String, VkPolygonMode> polygonModes
{
    { "VK_POLYGON_MODE_FILL",                 VK_POLYGON_MODE_FILL },
    { "VK_POLYGON_MODE_LINE",                 VK_POLYGON_MODE_LINE },
    { "VK_POLYGON_MODE_POINT",                VK_POLYGON_MODE_POINT },
    { "VK_POLYGON_MODE_FILL_RECTANGLE_NV",    VK_POLYGON_MODE_FILL_RECTANGLE_NV }
};

std::map<Core::String, VkFrontFace> frontFaces
{
    { "VK_FRONT_FACE_COUNTER_CLOCKWISE",  VK_FRONT_FACE_COUNTER_CLOCKWISE },
    { "VK_FRONT_FACE_CLOCKWISE",          VK_FRONT_FACE_CLOCKWISE }
};

std::map<Core::String, VkShaderStageFlags> shaderStages
{
    { "VK_SHADER_STAGE_VERTEX_BIT",                   VK_SHADER_STAGE_VERTEX_BIT },
    { "VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT",     VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT },
    { "VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT",  VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT },
    { "VK_SHADER_STAGE_GEOMETRY_BIT",                 VK_SHADER_STAGE_GEOMETRY_BIT },
    { "VK_SHADER_STAGE_FRAGMENT_BIT",                 VK_SHADER_STAGE_FRAGMENT_BIT },
    { "VK_SHADER_STAGE_COMPUTE_BIT",                  VK_SHADER_STAGE_COMPUTE_BIT },
    { "VK_SHADER_STAGE_ALL_GRAPHICS",                 VK_SHADER_STAGE_ALL_GRAPHICS },
    { "VK_SHADER_STAGE_ALL",                          VK_SHADER_STAGE_ALL },
    { "VK_SHADER_STAGE_RAYGEN_BIT_KHR",               VK_SHADER_STAGE_RAYGEN_BIT_KHR },
    { "VK_SHADER_STAGE_ANY_HIT_BIT_KHR",              VK_SHADER_STAGE_ANY_HIT_BIT_KHR },
    { "VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR",          VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR },
    { "VK_SHADER_STAGE_MISS_BIT_KHR",                 VK_SHADER_STAGE_MISS_BIT_KHR },
    { "VK_SHADER_STAGE_INTERSECTION_BIT_KHR",         VK_SHADER_STAGE_INTERSECTION_BIT_KHR },
    { "VK_SHADER_STAGE_CALLABLE_BIT_KHR",             VK_SHADER_STAGE_CALLABLE_BIT_KHR },
    { "VK_SHADER_STAGE_TASK_BIT_NV",                  VK_SHADER_STAGE_TASK_BIT_NV },
    { "VK_SHADER_STAGE_MESH_BIT_NV",                  VK_SHADER_STAGE_MESH_BIT_NV },
    { "VK_SHADER_STAGE_RAYGEN_BIT_NV",                VK_SHADER_STAGE_RAYGEN_BIT_NV },
    { "VK_SHADER_STAGE_ANY_HIT_BIT_NV",               VK_SHADER_STAGE_ANY_HIT_BIT_NV },
    { "VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV",           VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV },
    { "VK_SHADER_STAGE_MISS_BIT_NV",                  VK_SHADER_STAGE_MISS_BIT_NV },
    { "VK_SHADER_STAGE_INTERSECTION_BIT_NV",          VK_SHADER_STAGE_INTERSECTION_BIT_NV },
    { "VK_SHADER_STAGE_CALLABLE_BIT_NV",              VK_SHADER_STAGE_CALLABLE_BIT_NV },
};

std::map<Core::String, VkLogicOp> logicOperators
{
    { "VK_LOGIC_OP_CLEAR",            VK_LOGIC_OP_CLEAR },
    { "VK_LOGIC_OP_AND",              VK_LOGIC_OP_AND },
    { "VK_LOGIC_OP_AND_REVERSE",      VK_LOGIC_OP_AND_REVERSE },
    { "VK_LOGIC_OP_COPY",             VK_LOGIC_OP_COPY },
    { "VK_LOGIC_OP_AND_INVERTED",     VK_LOGIC_OP_AND_INVERTED },
    { "VK_LOGIC_OP_NO_OP",            VK_LOGIC_OP_NO_OP },
    { "VK_LOGIC_OP_XOR",              VK_LOGIC_OP_XOR },
    { "VK_LOGIC_OP_OR",               VK_LOGIC_OP_OR },
    { "VK_LOGIC_OP_NOR",              VK_LOGIC_OP_NOR },
    { "VK_LOGIC_OP_EQUIVALENT",       VK_LOGIC_OP_EQUIVALENT },
    { "VK_LOGIC_OP_INVERT",           VK_LOGIC_OP_INVERT },
    { "VK_LOGIC_OP_OR_REVERSE",       VK_LOGIC_OP_OR_REVERSE },
    { "VK_LOGIC_OP_COPY_INVERTED",    VK_LOGIC_OP_COPY_INVERTED },
    { "VK_LOGIC_OP_OR_INVERTED",      VK_LOGIC_OP_OR_INVERTED },
    { "VK_LOGIC_OP_NAND",             VK_LOGIC_OP_NAND },
    { "VK_LOGIC_OP_SET",              VK_LOGIC_OP_SET }
};

std::map<Core::String, VkBlendOp> blendOperations
{
    { "VK_BLEND_OP_ADD",                      VK_BLEND_OP_ADD },
    { "VK_BLEND_OP_SUBTRACT",                 VK_BLEND_OP_SUBTRACT },
    { "VK_BLEND_OP_REVERSE_SUBTRACT",         VK_BLEND_OP_REVERSE_SUBTRACT },
    { "VK_BLEND_OP_MIN",                      VK_BLEND_OP_MIN },
    { "VK_BLEND_OP_MAX",                      VK_BLEND_OP_MAX },
    { "VK_BLEND_OP_ZERO_EXT",                 VK_BLEND_OP_ZERO_EXT },
    { "VK_BLEND_OP_SRC_EXT",                  VK_BLEND_OP_SRC_EXT },
    { "VK_BLEND_OP_DST_EXT",                  VK_BLEND_OP_DST_EXT },
    { "VK_BLEND_OP_SRC_OVER_EXT",             VK_BLEND_OP_SRC_OVER_EXT },
    { "VK_BLEND_OP_DST_OVER_EXT",             VK_BLEND_OP_DST_OVER_EXT },
    { "VK_BLEND_OP_SRC_IN_EXT",               VK_BLEND_OP_SRC_IN_EXT },
    { "VK_BLEND_OP_DST_IN_EXT",               VK_BLEND_OP_DST_IN_EXT },
    { "VK_BLEND_OP_SRC_OUT_EXT",              VK_BLEND_OP_SRC_OUT_EXT },
    { "VK_BLEND_OP_DST_OUT_EXT",              VK_BLEND_OP_DST_OUT_EXT },
    { "VK_BLEND_OP_SRC_ATOP_EXT",             VK_BLEND_OP_SRC_ATOP_EXT },
    { "VK_BLEND_OP_DST_ATOP_EXT",             VK_BLEND_OP_DST_ATOP_EXT },
    { "VK_BLEND_OP_XOR_EXT",                  VK_BLEND_OP_XOR_EXT },
    { "VK_BLEND_OP_MULTIPLY_EXT",             VK_BLEND_OP_MULTIPLY_EXT },
    { "VK_BLEND_OP_SCREEN_EXT",               VK_BLEND_OP_SCREEN_EXT },
    { "VK_BLEND_OP_OVERLAY_EXT",              VK_BLEND_OP_OVERLAY_EXT },
    { "VK_BLEND_OP_DARKEN_EXT",               VK_BLEND_OP_DARKEN_EXT },
    { "VK_BLEND_OP_LIGHTEN_EXT",              VK_BLEND_OP_LIGHTEN_EXT },
    { "VK_BLEND_OP_COLORDODGE_EXT",           VK_BLEND_OP_COLORDODGE_EXT },
    { "VK_BLEND_OP_COLORBURN_EXT",            VK_BLEND_OP_COLORBURN_EXT },
    { "VK_BLEND_OP_HARDLIGHT_EXT",            VK_BLEND_OP_HARDLIGHT_EXT },
    { "VK_BLEND_OP_SOFTLIGHT_EXT",            VK_BLEND_OP_SOFTLIGHT_EXT },
    { "VK_BLEND_OP_DIFFERENCE_EXT",           VK_BLEND_OP_DIFFERENCE_EXT },
    { "VK_BLEND_OP_EXCLUSION_EXT",            VK_BLEND_OP_EXCLUSION_EXT },
    { "VK_BLEND_OP_INVERT_EXT",               VK_BLEND_OP_INVERT_EXT },
    { "VK_BLEND_OP_INVERT_RGB_EXT",           VK_BLEND_OP_INVERT_RGB_EXT },
    { "VK_BLEND_OP_LINEARDODGE_EXT",          VK_BLEND_OP_LINEARDODGE_EXT },
    { "VK_BLEND_OP_LINEARBURN_EXT",           VK_BLEND_OP_LINEARBURN_EXT },
    { "VK_BLEND_OP_VIVIDLIGHT_EXT",           VK_BLEND_OP_VIVIDLIGHT_EXT },
    { "VK_BLEND_OP_LINEARLIGHT_EXT",          VK_BLEND_OP_LINEARLIGHT_EXT },
    { "VK_BLEND_OP_PINLIGHT_EXT",             VK_BLEND_OP_PINLIGHT_EXT },
    { "VK_BLEND_OP_HARDMIX_EXT",              VK_BLEND_OP_HARDMIX_EXT },
    { "VK_BLEND_OP_HSL_HUE_EXT",              VK_BLEND_OP_HSL_HUE_EXT },
    { "VK_BLEND_OP_HSL_SATURATION_EXT",       VK_BLEND_OP_HSL_SATURATION_EXT },
    { "VK_BLEND_OP_HSL_COLOR_EXT",            VK_BLEND_OP_HSL_COLOR_EXT },
    { "VK_BLEND_OP_HSL_LUMINOSITY_EXT",       VK_BLEND_OP_HSL_LUMINOSITY_EXT },
    { "VK_BLEND_OP_PLUS_EXT",                 VK_BLEND_OP_PLUS_EXT },
    { "VK_BLEND_OP_PLUS_CLAMPED_EXT",         VK_BLEND_OP_PLUS_CLAMPED_EXT },
    { "VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT",   VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT },
    { "VK_BLEND_OP_PLUS_DARKER_EXT",          VK_BLEND_OP_PLUS_DARKER_EXT },
    { "VK_BLEND_OP_MINUS_EXT",                VK_BLEND_OP_MINUS_EXT },
    { "VK_BLEND_OP_MINUS_CLAMPED_EXT",        VK_BLEND_OP_MINUS_CLAMPED_EXT },
    { "VK_BLEND_OP_CONTRAST_EXT",             VK_BLEND_OP_CONTRAST_EXT },
    { "VK_BLEND_OP_INVERT_OVG_EXT",           VK_BLEND_OP_INVERT_OVG_EXT },
    { "VK_BLEND_OP_RED_EXT",                  VK_BLEND_OP_RED_EXT },
    { "VK_BLEND_OP_GREEN_EXT",                VK_BLEND_OP_GREEN_EXT },
    { "VK_BLEND_OP_BLUE_EXT",                 VK_BLEND_OP_BLUE_EXT }
};

std::map<Core::String, VkBlendFactor> blendFactors
{
    { "VK_BLEND_FACTOR_ZERO",		                VK_BLEND_FACTOR_ZERO },
    { "VK_BLEND_FACTOR_ONE",		                VK_BLEND_FACTOR_ONE },
    { "VK_BLEND_FACTOR_SRC_COLOR",		        VK_BLEND_FACTOR_SRC_COLOR },
    { "VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR",		VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR },
    { "VK_BLEND_FACTOR_DST_COLOR",		        VK_BLEND_FACTOR_DST_COLOR },
    { "VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR",		VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR },
    { "VK_BLEND_FACTOR_SRC_ALPHA",		        VK_BLEND_FACTOR_SRC_ALPHA },
    { "VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA",		VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA },
    { "VK_BLEND_FACTOR_DST_ALPHA",		        VK_BLEND_FACTOR_DST_ALPHA },
    { "VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA",		VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA },
    { "VK_BLEND_FACTOR_CONSTANT_COLOR",		    VK_BLEND_FACTOR_CONSTANT_COLOR },
    { "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR",	VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR },
    { "VK_BLEND_FACTOR_CONSTANT_ALPHA",		    VK_BLEND_FACTOR_CONSTANT_ALPHA },
    { "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA",	VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA },
    { "VK_BLEND_FACTOR_SRC_ALPHA_SATURATE",		VK_BLEND_FACTOR_SRC_ALPHA_SATURATE },
    { "VK_BLEND_FACTOR_SRC1_COLOR",		        VK_BLEND_FACTOR_SRC1_COLOR },
    { "VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR",		VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR },
    { "VK_BLEND_FACTOR_SRC1_ALPHA",		        VK_BLEND_FACTOR_SRC1_ALPHA },
    { "VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA",		VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA }
};

std::map<Core::String, VkColorComponentFlags> colorComponents
{
    { "VK_COLOR_COMPONENT_R_BIT",		VK_COLOR_COMPONENT_R_BIT },
    { "VK_COLOR_COMPONENT_G_BIT",		VK_COLOR_COMPONENT_G_BIT },
    { "VK_COLOR_COMPONENT_B_BIT",		VK_COLOR_COMPONENT_B_BIT },
    { "VK_COLOR_COMPONENT_A_BIT",		VK_COLOR_COMPONENT_A_BIT }
};

std::map<Core::String, VkCompareOp> compareOperations
{
    { "VK_COMPARE_OP_NEVER",		        VK_COMPARE_OP_NEVER },
    { "VK_COMPARE_OP_LESS",		        VK_COMPARE_OP_LESS },
    { "VK_COMPARE_OP_EQUAL",		        VK_COMPARE_OP_EQUAL },
    { "VK_COMPARE_OP_LESS_OR_EQUAL",	    VK_COMPARE_OP_LESS_OR_EQUAL },
    { "VK_COMPARE_OP_GREATER",		    VK_COMPARE_OP_GREATER },
    { "VK_COMPARE_OP_NOT_EQUAL",		    VK_COMPARE_OP_NOT_EQUAL },
    { "VK_COMPARE_OP_GREATER_OR_EQUAL",	VK_COMPARE_OP_GREATER_OR_EQUAL },
    { "VK_COMPARE_OP_ALWAYS",		        VK_COMPARE_OP_ALWAYS }
};

std::map<Core::String, VkStencilOp> stencilOperations
{
    { "VK_STENCIL_OP_KEEP",		            VK_STENCIL_OP_KEEP },
    { "VK_STENCIL_OP_ZERO",		            VK_STENCIL_OP_ZERO },
    { "VK_STENCIL_OP_REPLACE",		        VK_STENCIL_OP_REPLACE },
    { "VK_STENCIL_OP_INCREMENT_AND_CLAMP",	VK_STENCIL_OP_INCREMENT_AND_CLAMP },
    { "VK_STENCIL_OP_DECREMENT_AND_CLAMP",	VK_STENCIL_OP_DECREMENT_AND_CLAMP },
    { "VK_STENCIL_OP_INVERT",		            VK_STENCIL_OP_INVERT },
    { "VK_STENCIL_OP_INCREMENT_AND_WRAP",		VK_STENCIL_OP_INCREMENT_AND_WRAP },
    { "VK_STENCIL_OP_DECREMENT_AND_WRAP",		VK_STENCIL_OP_DECREMENT_AND_WRAP },
};

std::map<Core::String, VkDynamicState> dynamics
{
    { "VK_DYNAMIC_STATE_VIEWPORT",		                    VK_DYNAMIC_STATE_VIEWPORT },
    { "VK_DYNAMIC_STATE_SCISSOR",		                        VK_DYNAMIC_STATE_SCISSOR },
    { "VK_DYNAMIC_STATE_LINE_WIDTH",		                    VK_DYNAMIC_STATE_LINE_WIDTH },
    { "VK_DYNAMIC_STATE_DEPTH_BIAS",		                    VK_DYNAMIC_STATE_DEPTH_BIAS },
    { "VK_DYNAMIC_STATE_BLEND_CONSTANTS",		                VK_DYNAMIC_STATE_BLEND_CONSTANTS },
    { "VK_DYNAMIC_STATE_DEPTH_BOUNDS",		                VK_DYNAMIC_STATE_DEPTH_BOUNDS },
    { "VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK",		        VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK },
    { "VK_DYNAMIC_STATE_STENCIL_WRITE_MASK",		            VK_DYNAMIC_STATE_STENCIL_WRITE_MASK },
    { "VK_DYNAMIC_STATE_STENCIL_REFERENCE",		            VK_DYNAMIC_STATE_STENCIL_REFERENCE },
    { "VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV",		        VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV },
    { "VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT",		        VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT },
    { "VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT",		        VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT },
    { "VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV",    VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV },
    { "VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV",		VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV },
    { "VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV",		        VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV },
    { "VK_DYNAMIC_STATE_LINE_STIPPLE_EXT",		            VK_DYNAMIC_STATE_LINE_STIPPLE_EXT }
};

std::map<Core::String, VkVertexInputRate> vertexInputRates
{
    { "VK_VERTEX_INPUT_RATE_VERTEX",   VK_VERTEX_INPUT_RATE_VERTEX },
    { "VK_VERTEX_INPUT_RATE_INSTANCE", VK_VERTEX_INPUT_RATE_INSTANCE }
};

std::map<Core::String, VkDescriptorType> descriptorTypes
{
    { "VK_DESCRIPTOR_TYPE_SAMPLER",                   VK_DESCRIPTOR_TYPE_SAMPLER },
    { "VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER",    VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER },
    { "VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE",		        VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE },
    { "VK_DESCRIPTOR_TYPE_STORAGE_IMAGE",		        VK_DESCRIPTOR_TYPE_STORAGE_IMAGE },
    { "VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER",		VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER },
    { "VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER",		VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER },
    { "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER",		    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER },
    { "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER",		    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER },
    { "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC",	VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC },
    { "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC",	VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC },
    { "VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT",		    VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT },
    { "VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT",	VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT },
    { "VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR",VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR },
    { "VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV",	VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV }
};

std::map<Core::String, VkIndexType> indexTypes
{
    { "VK_INDEX_TYPE_UINT16",		VK_INDEX_TYPE_UINT16 },
    { "VK_INDEX_TYPE_UINT32",		VK_INDEX_TYPE_UINT32 },
    { "VK_INDEX_TYPE_NONE_NV",	VK_INDEX_TYPE_NONE_NV },
    { "VK_INDEX_TYPE_UINT8_EXT",	VK_INDEX_TYPE_UINT8_EXT }
};

std::map<Core::String, VkFilter> filters
{
    { "VK_FILTER_NEAREST",	VK_FILTER_NEAREST },
    { "VK_FILTER_LINEAR",		VK_FILTER_LINEAR },
    { "VK_FILTER_CUBIC_IMG",	VK_FILTER_CUBIC_IMG },
    { "VK_FILTER_CUBIC_EXT",	VK_FILTER_CUBIC_EXT }
};

std::map<Core::String, VkSamplerMipmapMode> samplerMipmaps
{
    { "VK_SAMPLER_MIPMAP_MODE_NEAREST",	VK_SAMPLER_MIPMAP_MODE_NEAREST },
    { "VK_SAMPLER_MIPMAP_MODE_LINEAR",	VK_SAMPLER_MIPMAP_MODE_LINEAR },
};

std::map<Core::String, VkSamplerAddressMode> samplerAdresses
{
    { "VK_SAMPLER_ADDRESS_MODE_REPEAT",	                VK_SAMPLER_ADDRESS_MODE_REPEAT },
    { "VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT",	        VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT },
    { "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE",	        VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE },
    { "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER",	        VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER },
    { "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE",	    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE },
    { "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR",	VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR }
};

std::map<Core::String, VkBorderColor> borderColors
{
    { "VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK",  VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK },
    { "VK_BORDER_COLOR_INT_TRANSPARENT_BLACK",    VK_BORDER_COLOR_INT_TRANSPARENT_BLACK },
    { "VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK",       VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK },
    { "VK_BORDER_COLOR_INT_OPAQUE_BLACK",         VK_BORDER_COLOR_INT_OPAQUE_BLACK },
    { "VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE",       VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE },
    { "VK_BORDER_COLOR_INT_OPAQUE_WHITE",         VK_BORDER_COLOR_INT_OPAQUE_WHITE }
};

std::map<Core::String, VkCommandPoolCreateFlags> poolCreateFlags
{
    { "VK_COMMAND_POOL_CREATE_TRANSIENT_BIT",             VK_COMMAND_POOL_CREATE_TRANSIENT_BIT },
    { "VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT",  VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT },
    { "VK_COMMAND_POOL_CREATE_PROTECTED_BIT",             VK_COMMAND_POOL_CREATE_PROTECTED_BIT },
};

std::map<Core::String, VkCommandBufferUsageFlags> commandBufferUsages
{
    { "VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT",       VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT },
    { "VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT",  VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT },
    { "VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT",      VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT },
};

std::map<VkShaderStageFlags, RT::ShaderKind> shaderKinds
{
    { VK_SHADER_STAGE_VERTEX_BIT,                   RT::ShaderKind::Vertex },
    { VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT,     RT::ShaderKind::TessellationControl },
    { VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT,  RT::ShaderKind::TessellationEvaluation },
    { VK_SHADER_STAGE_GEOMETRY_BIT,                 RT::ShaderKind::Geometry  },
    { VK_SHADER_STAGE_FRAGMENT_BIT,                 RT::ShaderKind::Fragment },
    { VK_SHADER_STAGE_COMPUTE_BIT,                  RT::ShaderKind::Compute },

    { VK_SHADER_STAGE_RAYGEN_BIT_KHR,               RT::ShaderKind::Raytracing_Gen },
    { VK_SHADER_STAGE_ANY_HIT_BIT_KHR,              RT::ShaderKind::Raytracing_AnyHit },
    { VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR,          RT::ShaderKind::Raytracing_ClosestHit },
    { VK_SHADER_STAGE_MISS_BIT_KHR,                 RT::ShaderKind::Raytracing_Miss },
    { VK_SHADER_STAGE_INTERSECTION_BIT_KHR,         RT::ShaderKind::Raytracing_Intersection },
};

std::map<Core::String, VkRayTracingShaderGroupTypeKHR> rayTracingGroupTypes
{
    { "VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR",              VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR },
    { "VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR",  VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR },
    { "VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR", VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR },
    { "VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV",               VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV },
    { "VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV",   VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV },
    { "VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV",  VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV },
};

std::map<Core::String, VkAccelerationStructureTypeKHR> accelerationStructureTypes
{
    { "VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR",     VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR },
    { "VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR",  VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR },
    { "VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR",       VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR },
    { "VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV",      VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV },
    { "VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV",   VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV },
};

std::map<Core::String, VkGeometryFlagsKHR> geometryFlags
{
    { "VK_GEOMETRY_OPAQUE_BIT_KHR",                           VK_GEOMETRY_OPAQUE_BIT_KHR },
    { "VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR",  VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR },
    { "VK_GEOMETRY_OPAQUE_BIT_NV",                            VK_GEOMETRY_OPAQUE_BIT_NV },
    { "VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV",   VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV },
};

std::map<Core::String, VkGeometryInstanceFlagsKHR> geometryInstanceFlags
{
    { "VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR",    VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR },
    { "VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR", VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR },
    { "VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR",                    VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR },
    { "VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR",                 VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR },
    { "VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV",            VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV },
    { "VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV",  VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV },
    { "VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV",                     VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV },
    { "VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV",                  VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV },
};

}